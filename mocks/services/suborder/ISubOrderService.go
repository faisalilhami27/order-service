// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "order-service/domain/dto/suborder"
	helper "order-service/utils/helper"

	mock "github.com/stretchr/testify/mock"
)

// ISubOrderService is an autogenerated mock type for the ISubOrderService type
type ISubOrderService struct {
	mock.Mock
}

// Cancel provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderService) Cancel(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderService) CreateOrder(_a0 context.Context, _a1 *dto.SubOrderRequest) (*dto.SubOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.SubOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SubOrderRequest) (*dto.SubOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SubOrderRequest) *dto.SubOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.SubOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.SubOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderDetail provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderService) GetOrderDetail(_a0 context.Context, _a1 string) (*dto.SubOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.SubOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.SubOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.SubOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.SubOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubOrderList provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderService) GetSubOrderList(_a0 context.Context, _a1 *dto.SubOrderRequestParam) (*helper.PaginationResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *helper.PaginationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SubOrderRequestParam) (*helper.PaginationResult, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SubOrderRequestParam) *helper.PaginationResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helper.PaginationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.SubOrderRequestParam) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISubOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewISubOrderService creates a new instance of ISubOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISubOrderService(t mockConstructorTestingTNewISubOrderService) *ISubOrderService {
	mock := &ISubOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
