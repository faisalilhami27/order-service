// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "order-service/domain/dto/suborder"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "order-service/domain/models"

	uuid "github.com/google/uuid"
)

// ISubOrderRepository is an autogenerated mock type for the ISubOrderRepository type
type ISubOrderRepository struct {
	mock.Mock
}

// BulkCreate provides a mock function with given fields: _a0, _a1, _a2
func (_m *ISubOrderRepository) BulkCreate(_a0 context.Context, _a1 *gorm.DB, _a2 []models.SubOrder) ([]models.SubOrder, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []models.SubOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, []models.SubOrder) ([]models.SubOrder, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, []models.SubOrder) []models.SubOrder); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SubOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, []models.SubOrder) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cancel provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ISubOrderRepository) Cancel(_a0 context.Context, _a1 *gorm.DB, _a2 *dto.CancelRequest, _a3 *models.SubOrder) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *dto.CancelRequest, *models.SubOrder) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *ISubOrderRepository) Create(_a0 context.Context, _a1 *gorm.DB, _a2 *models.SubOrder) (*models.SubOrder, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.SubOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *models.SubOrder) (*models.SubOrder, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *models.SubOrder) *models.SubOrder); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *models.SubOrder) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByOrderID provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderRepository) FindAllByOrderID(_a0 context.Context, _a1 uint) ([]models.SubOrder, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.SubOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) ([]models.SubOrder, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.SubOrder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SubOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllWithPagination provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderRepository) FindAllWithPagination(_a0 context.Context, _a1 *dto.SubOrderRequestParam) ([]models.SubOrder, int64, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.SubOrder
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SubOrderRequestParam) ([]models.SubOrder, int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SubOrderRequestParam) []models.SubOrder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SubOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.SubOrderRequestParam) int64); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.SubOrderRequestParam) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOneByOrderIDAndPaymentType provides a mock function with given fields: _a0, _a1, _a2
func (_m *ISubOrderRepository) FindOneByOrderIDAndPaymentType(_a0 context.Context, _a1 uint, _a2 string) (*models.SubOrder, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.SubOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) (*models.SubOrder, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) *models.SubOrder); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByUUID provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderRepository) FindOneByUUID(_a0 context.Context, _a1 string) (*models.SubOrder, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.SubOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.SubOrder, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.SubOrder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneSubOrderByCustomerIDWithLocking provides a mock function with given fields: _a0, _a1
func (_m *ISubOrderRepository) FindOneSubOrderByCustomerIDWithLocking(_a0 context.Context, _a1 uuid.UUID) (*models.SubOrder, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.SubOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.SubOrder, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.SubOrder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SubOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ISubOrderRepository) Update(_a0 context.Context, _a1 *gorm.DB, _a2 *dto.UpdateSubOrderRequest, _a3 *models.SubOrder) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *dto.UpdateSubOrderRequest, *models.SubOrder) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISubOrderRepository creates a new instance of ISubOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISubOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISubOrderRepository {
	mock := &ISubOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
