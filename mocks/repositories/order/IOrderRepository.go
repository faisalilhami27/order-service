// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "order-service/domain/dto/order"
	"order-service/domain/models"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *IOrderRepository) Create(_a0 context.Context, _a1 *gorm.DB, _a2 *dto.OrderRequest) (*models.Order, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *dto.OrderRequest) (*models.Order, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *dto.OrderRequest) *models.Order); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *dto.OrderRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByOrderID provides a mock function with given fields: _a0, _a1, _a2
func (_m *IOrderRepository) DeleteByOrderID(_a0 context.Context, _a1 *gorm.DB, _a2 uint) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, uint) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneOrderByCustomerIDWithLocking provides a mock function with given fields: _a0, _a1
func (_m *IOrderRepository) FindOneOrderByCustomerIDWithLocking(_a0 context.Context, _a1 uuid.UUID) (*models.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneOrderByID provides a mock function with given fields: _a0, _a1
func (_m *IOrderRepository) FindOneOrderByID(_a0 context.Context, _a1 uint) (*models.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneOrderByUUID provides a mock function with given fields: _a0, _a1
func (_m *IOrderRepository) FindOneOrderByUUID(_a0 context.Context, _a1 uuid.UUID) (*models.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Order, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, db, request
func (_m *IOrderRepository) Update(ctx context.Context, db *gorm.DB, request *dto.OrderRequest) error {
	ret := _m.Called(ctx, db, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *dto.OrderRequest) error); ok {
		r0 = rf(ctx, db, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
