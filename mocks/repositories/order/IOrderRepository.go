// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	modelsorder "order-service/domain/models/order"

	order "order-service/domain/dto/order"

	uuid "github.com/google/uuid"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *IOrderRepository) Create(_a0 context.Context, _a1 *gorm.DB, _a2 *order.OrderRequest) (*modelsorder.Order, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *modelsorder.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *order.OrderRequest) (*modelsorder.Order, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *order.OrderRequest) *modelsorder.Order); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelsorder.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *order.OrderRequest) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneOrderByCustomerIDWithLocking provides a mock function with given fields: ctx, customerID
func (_m *IOrderRepository) FindOneOrderByCustomerIDWithLocking(ctx context.Context, customerID uuid.UUID) (*modelsorder.Order, error) {
	ret := _m.Called(ctx, customerID)

	var r0 *modelsorder.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*modelsorder.Order, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *modelsorder.Order); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelsorder.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderRepository(t mockConstructorTestingTNewIOrderRepository) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
