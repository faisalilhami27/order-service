// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	orderhistory "order-service/repositories/orderhistory"

	orderinvoice "order-service/repositories/orderinvoice"

	orderpayment "order-service/repositories/orderpayment"

	repositories "order-service/repositories/order"

	suborder "order-service/repositories/suborder"
)

// IRepositoryRegistry is an autogenerated mock type for the IRepositoryRegistry type
type IRepositoryRegistry struct {
	mock.Mock
}

// GetOrder provides a mock function with given fields:
func (_m *IRepositoryRegistry) GetOrder() repositories.IOrderRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 repositories.IOrderRepository
	if rf, ok := ret.Get(0).(func() repositories.IOrderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.IOrderRepository)
		}
	}

	return r0
}

// GetOrderHistory provides a mock function with given fields:
func (_m *IRepositoryRegistry) GetOrderHistory() orderhistory.IOrderHistoryRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrderHistory")
	}

	var r0 orderhistory.IOrderHistoryRepository
	if rf, ok := ret.Get(0).(func() orderhistory.IOrderHistoryRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orderhistory.IOrderHistoryRepository)
		}
	}

	return r0
}

// GetOrderInvoice provides a mock function with given fields:
func (_m *IRepositoryRegistry) GetOrderInvoice() orderinvoice.IOrderInvoiceRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrderInvoice")
	}

	var r0 orderinvoice.IOrderInvoiceRepository
	if rf, ok := ret.Get(0).(func() orderinvoice.IOrderInvoiceRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orderinvoice.IOrderInvoiceRepository)
		}
	}

	return r0
}

// GetOrderPayment provides a mock function with given fields:
func (_m *IRepositoryRegistry) GetOrderPayment() orderpayment.IOrderPaymentRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrderPayment")
	}

	var r0 orderpayment.IOrderPaymentRepository
	if rf, ok := ret.Get(0).(func() orderpayment.IOrderPaymentRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orderpayment.IOrderPaymentRepository)
		}
	}

	return r0
}

// GetSubOrder provides a mock function with given fields:
func (_m *IRepositoryRegistry) GetSubOrder() suborder.ISubOrderRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubOrder")
	}

	var r0 suborder.ISubOrderRepository
	if rf, ok := ret.Get(0).(func() suborder.ISubOrderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(suborder.ISubOrderRepository)
		}
	}

	return r0
}

// GetTx provides a mock function with given fields:
func (_m *IRepositoryRegistry) GetTx() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// NewIRepositoryRegistry creates a new instance of IRepositoryRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepositoryRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepositoryRegistry {
	mock := &IRepositoryRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
