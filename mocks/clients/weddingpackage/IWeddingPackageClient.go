// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	clients "order-service/clients/weddingpackage"

	mock "github.com/stretchr/testify/mock"
)

// IWeddingPackageClient is an autogenerated mock type for the IWeddingPackageClient type
type IWeddingPackageClient struct {
	mock.Mock
}

// GetDetailPackage provides a mock function with given fields: _a0, _a1
func (_m *IWeddingPackageClient) GetDetailPackage(_a0 context.Context, _a1 string) (*clients.PackageData, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *clients.PackageData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*clients.PackageData, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *clients.PackageData); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients.PackageData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIWeddingPackageClient creates a new instance of IWeddingPackageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWeddingPackageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWeddingPackageClient {
	mock := &IWeddingPackageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
